


app {

  version = "2020.2.13a"

  server {
    protocol = "http"
    domain = "flowdev.neoap.com"
//    hostName = "10.1.29.247"
    hostName = "localhost"
    port = 42075
    InternalToken = "dlkjfadlfkjasdfj3093rjoijfsadf"
    url = "geek"
    videoPath = "/home/teamqhx/srs/srs-3.0-a8/trunk/objs/nginx/html/live/"
  }

  http {
    interface = "0.0.0.0"
    port = 42075
  }

  authCheck = false

  client {
    appIds = [""]
    secureKeys = [""]
  }

  rtmp {
    isTest = false
    protocol = "rtmp"
//    ip = "127.0.0.1"
    ip = "10.1.29.247"
//    ip = "39.105.16.162"
    port = 1935
    scope = "live"
  }

}



slick.db {
  //url = "jdbc:h2:file:./DATA/H2/geek"
  //url = "jdbc:h2:/Users/hewro/Documents/工作/东信北邮/公司开发项目/geek/backend/data/geek"
  //url = "jdbc:h2:file:./data/geek;MVCC=TRUE"
  //url = "jdbc:h2:file:./backend/data/geek;MVCC=TRUE"//注意相对路径
  //url = "jdbc:h2:file:F:\\Scala\\workspace\\geek\\data\\geek"
  url = "jdbc:mysql://49.232.42.230:3306/geek?characterEncoding=utf-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true" //  new test
  user = "geek"
  password = "geek"
  maximumPoolSize = 30
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}



session {

  cookie {
    name = "geek"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "0a(do3Dr^20+Gfhf92*md4sK343dg-aj53Kd4ymc23;M0;[0gfdytyrewrei2rl4;zt3;lmO3lrtsy"

}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }



}


